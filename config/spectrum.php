<?php

return [
    /*
    |--------------------------------------------------------------------------
    | API Documentation Title
    |--------------------------------------------------------------------------
    |
    | The title of your API documentation. This will be displayed at the top
    | of the generated documentation.
    |
    */
    'title' => env('APP_NAME', 'Laravel').' API',

    /*
    |--------------------------------------------------------------------------
    | API Version
    |--------------------------------------------------------------------------
    |
    | The version of your API. This will be included in the OpenAPI spec.
    |
    */
    'version' => '1.0.0',

    /*
    |--------------------------------------------------------------------------
    | API Description
    |--------------------------------------------------------------------------
    |
    | A description of your API that will be included in the documentation.
    |
    */
    'description' => 'API documentation generated by Laravel Spectrum',

    /*
    |--------------------------------------------------------------------------
    | Route Patterns
    |--------------------------------------------------------------------------
    |
    | The route patterns that should be included in the documentation.
    | Use wildcards to match multiple routes.
    |
    */
    'route_patterns' => [
        'api/*',
        'api/v1/*',
        'api/v2/*',
    ],

    /*
    |--------------------------------------------------------------------------
    | Custom Route Files
    |--------------------------------------------------------------------------
    |
    | Additional route files to load and analyze beyond the standard Laravel
    | route files. These files will be included in both analysis and caching.
    |
    */
    'route_files' => [
        // base_path('routes/custom.php'),
        // base_path('routes/admin.php'),
    ],


    /*
    |--------------------------------------------------------------------------
    | Tag Mappings
    |--------------------------------------------------------------------------
    |
    | Custom tag mappings for organizing your API endpoints. You can use
    | exact matches or wildcards (*) to map routes to specific tags.
    |
    */
    'tags' => [
        // Exact match example:
        // 'api/v1/auth/login' => 'Authentication',

        // Wildcard example:
        // 'api/v1/auth/*' => 'Authentication',
        // 'api/v1/admin/*' => 'Administration',
        // 'api/v1/billing/*' => 'Billing',
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Configuration
    |--------------------------------------------------------------------------
    |
    | Configure how authentication is detected and documented.
    |
    */
    'authentication' => [
        /*
        | Global authentication settings
        */
        'global' => [
            'enabled' => false,
            'scheme' => [
                'type' => 'http',
                'scheme' => 'bearer',
                'bearerFormat' => 'JWT',
                'description' => 'Global JWT authentication',
                'name' => 'globalAuth',
            ],
            'required' => false,
        ],

        /*
        | Custom authentication schemes
        | Map middleware names to OpenAPI security schemes
        */
        'custom_schemes' => [
            // 'custom-auth' => [
            //     'type' => 'apiKey',
            //     'in' => 'header',
            //     'name' => 'X-Custom-Token',
            //     'description' => 'Custom API token',
            //     'name' => 'customAuth',
            // ],
        ],

        /*
        | Pattern-based authentication
        | Apply authentication to routes matching patterns
        */
        'patterns' => [
            // 'api/admin/*' => [
            //     'scheme' => [...],
            //     'required' => true,
            // ],
        ],

        /*
        | OAuth2 configuration for Passport
        */
        'oauth2' => [
            'authorization_url' => env('APP_URL').'/oauth/authorize',
            'token_url' => env('APP_URL').'/oauth/token',
            'refresh_url' => env('APP_URL').'/oauth/token',
            'scopes' => [
                // 'read' => 'Read access',
                // 'write' => 'Write access',
            ],
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Configuration
    |--------------------------------------------------------------------------
    |
    | Configure the caching behavior for analysis results.
    |
    */
    'cache' => [
        /*
        |--------------------------------------------------------------------------
        | Enable Cache
        |--------------------------------------------------------------------------
        |
        | When enabled, analysis results will be cached to speed up subsequent
        | documentation generation.
        |
        */
        'enabled' => env('SPECTRUM_CACHE_ENABLED', true),

        /*
        |--------------------------------------------------------------------------
        | Cache Directory
        |--------------------------------------------------------------------------
        |
        | The directory where cache files will be stored.
        |
        */
        'directory' => function_exists('storage_path')
            ? storage_path('app/spectrum/cache')
            : getcwd().'/storage/spectrum/cache',

        /*
        |--------------------------------------------------------------------------
        | Cache TTL
        |--------------------------------------------------------------------------
        |
        | Time to live for cache files in seconds. Set to null for no expiration.
        |
        */
        'ttl' => env('SPECTRUM_CACHE_TTL', null),

        /*
        |--------------------------------------------------------------------------
        | Watch Files
        |--------------------------------------------------------------------------
        |
        | Additional files to watch for changes that should invalidate the cache.
        |
        */
        'watch_files' => [
            base_path('composer.json'),
            base_path('composer.lock'),
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Watch Configuration
    |--------------------------------------------------------------------------
    |
    | Configure the file watching behavior for real-time preview.
    |
    */
    'watch' => [
        /*
        |--------------------------------------------------------------------------
        | File Watching
        |--------------------------------------------------------------------------
        |
        | Configure which directories and files to watch for changes.
        |
        */
        'paths' => [
            app_path('Http/Controllers'),
            app_path('Http/Requests'),
            app_path('Http/Resources'),
            base_path('routes'),
        ],

        /*
        |--------------------------------------------------------------------------
        | Watch Ignore Patterns
        |--------------------------------------------------------------------------
        |
        | Files matching these patterns will be ignored.
        |
        */
        'ignore' => [
            '*.log',
            '*.cache',
            '.git',
            'vendor',
            'node_modules',
        ],

        /*
        |--------------------------------------------------------------------------
        | Debounce Time
        |--------------------------------------------------------------------------
        |
        | Wait this many milliseconds after a file change before regenerating.
        | Useful to avoid multiple regenerations when saving multiple files.
        |
        */
        'debounce' => 300,
    ],

    /*
    |--------------------------------------------------------------------------
    | Validation Analysis
    |--------------------------------------------------------------------------
    |
    | Configure how validation rules are detected and analyzed.
    |
    */
    'validation' => [
        /*
        |--------------------------------------------------------------------------
        | Validation Analysis
        |--------------------------------------------------------------------------
        */
        'analyze_inline' => true, // インラインバリデーションを解析
        'analyze_form_requests' => true, // FormRequestを解析

    ],

    /*
    |--------------------------------------------------------------------------
    | Response Transformer Support
    |--------------------------------------------------------------------------
    |
    | Configure support for various response transformation libraries.
    |
    */
    'transformers' => [
        /*
        |--------------------------------------------------------------------------
        | Enabled Transformers
        |--------------------------------------------------------------------------
        |
        | Supported transformers for API response analysis
        |
        */
        'enabled' => [
            'laravel-resource' => true,
            'fractal' => true,
        ],

        /*
        |--------------------------------------------------------------------------
        | Fractal Settings
        |--------------------------------------------------------------------------
        |
        | Configuration specific to Fractal transformer support
        |
        */
        'fractal' => [
            // Default serializer format
            'default_serializer' => 'array', // array, data_array, json_api

            // How to handle includes in OpenAPI
            'include_handling' => 'optional_properties', // optional_properties or separate_endpoints

            // Default pagination schema for collections
            'pagination_schema' => [
                'type' => 'object',
                'properties' => [
                    'data' => ['type' => 'array'],
                    'meta' => [
                        'type' => 'object',
                        'properties' => [
                            'pagination' => [
                                'type' => 'object',
                                'properties' => [
                                    'total' => ['type' => 'integer'],
                                    'count' => ['type' => 'integer'],
                                    'per_page' => ['type' => 'integer'],
                                    'current_page' => ['type' => 'integer'],
                                    'total_pages' => ['type' => 'integer'],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Example Generation
    |--------------------------------------------------------------------------
    |
    | Configure how example values are generated for your API documentation.
    |
    */
    'example_generation' => [
        /*
        |--------------------------------------------------------------------------
        | Use Faker
        |--------------------------------------------------------------------------
        |
        | When enabled, Faker will be used to generate realistic example data.
        | When disabled, static example values will be used.
        |
        */
        'use_faker' => env('SPECTRUM_USE_FAKER', true),

        /*
        |--------------------------------------------------------------------------
        | Faker Locale
        |--------------------------------------------------------------------------
        |
        | The locale to use for Faker data generation. This affects names,
        | addresses, phone numbers, and other locale-specific data.
        |
        */
        'faker_locale' => env('SPECTRUM_FAKER_LOCALE', config('app.faker_locale', 'en_US')),

        /*
        |--------------------------------------------------------------------------
        | Faker Seed
        |--------------------------------------------------------------------------
        |
        | Set a seed value to generate consistent example data across runs.
        | Leave null for random data each time.
        |
        */
        'faker_seed' => env('SPECTRUM_FAKER_SEED', null),

        /*
        |--------------------------------------------------------------------------
        | Custom Field Generators
        |--------------------------------------------------------------------------
        |
        | Define custom generators for specific field names across all resources.
        | The key is the field name, and the value is a callable that receives
        | a Faker instance and returns the example value.
        |
        */
        'custom_generators' => [
            // 'status' => fn($faker) => $faker->randomElement(['active', 'inactive', 'pending']),
            // 'role' => fn($faker) => $faker->randomElement(['admin', 'user', 'guest']),
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Response Detection Configuration
    |--------------------------------------------------------------------------
    |
    | Configure automatic response body detection from controller methods.
    |
    */
    'response_detection' => [
        /*
        |--------------------------------------------------------------------------
        | Enable Response Detection
        |--------------------------------------------------------------------------
        |
        | When enabled, Laravel Spectrum will analyze controller return statements
        | to automatically detect response structures.
        |
        */
        'enabled' => env('SPECTRUM_RESPONSE_DETECTION', true),

        /*
        |--------------------------------------------------------------------------
        | Include Model Attributes
        |--------------------------------------------------------------------------
        |
        | When enabled, Eloquent model attributes will be included in the response
        | schema, respecting $hidden, $casts, and $appends properties.
        |
        */
        'include_model_attributes' => true,

        /*
        |--------------------------------------------------------------------------
        | Analysis Depth
        |--------------------------------------------------------------------------
        |
        | Maximum depth for analyzing nested structures and method chains.
        |
        */
        'max_depth' => 3,

        /*
        |--------------------------------------------------------------------------
        | Type Inference Settings
        |--------------------------------------------------------------------------
        |
        | Configure how types are inferred when they cannot be determined.
        |
        */
        'type_inference' => [
            'strict' => false,
            'fallback_type' => 'string',
        ],

        /*
        |--------------------------------------------------------------------------
        | Cache Model Schemas
        |--------------------------------------------------------------------------
        |
        | When enabled, Eloquent model schemas will be cached to improve performance.
        |
        */
        'cache_model_schemas' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Error Handling Configuration
    |--------------------------------------------------------------------------
    |
    | Configure how errors are handled during documentation generation.
    |
    */
    'error_handling' => [
        /*
        |--------------------------------------------------------------------------
        | Fail on Error
        |--------------------------------------------------------------------------
        |
        | When enabled, the generation process will stop on the first error.
        | When disabled, errors will be collected and reported at the end.
        |
        */
        'fail_on_error' => env('SPECTRUM_FAIL_ON_ERROR', false),

        /*
        |--------------------------------------------------------------------------
        | Error Report Path
        |--------------------------------------------------------------------------
        |
        | Default path where error reports will be saved.
        |
        */
        'error_report_path' => function_exists('storage_path')
            ? storage_path('app/spectrum/error-report.json')
            : getcwd().'/storage/spectrum/error-report.json',

        /*
        |--------------------------------------------------------------------------
        | Ignore Patterns
        |--------------------------------------------------------------------------
        |
        | Error patterns that should be ignored. Useful for known issues
        | that don't affect documentation quality.
        |
        */
        'ignore_patterns' => [
            // '/vendor/' // Ignore errors from vendor directory
        ],

        /*
        |--------------------------------------------------------------------------
        | Error Notifications
        |--------------------------------------------------------------------------
        |
        | Configure if and how to send notifications when errors occur.
        |
        */
        'notifications' => [
            'enabled' => false,
            'channels' => ['log'],
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Performance Configuration
    |--------------------------------------------------------------------------
    |
    | Configure performance optimizations for large-scale projects.
    |
    */
    'performance' => [
        /*
        |--------------------------------------------------------------------------
        | Enable Performance Optimizations
        |--------------------------------------------------------------------------
        */
        'enabled' => env('SPECTRUM_PERFORMANCE_ENABLED', true),

        /*
        |--------------------------------------------------------------------------
        | Parallel Processing
        |--------------------------------------------------------------------------
        */
        'parallel_processing' => env('SPECTRUM_PARALLEL_PROCESSING', true),
        'max_workers' => env('SPECTRUM_MAX_WORKERS', null), // null = auto-detect

        /*
        |--------------------------------------------------------------------------
        | Chunk Processing
        |--------------------------------------------------------------------------
        */
        'chunk_size' => env('SPECTRUM_CHUNK_SIZE', 100),
        'auto_chunk_size' => true, // Automatically calculate optimal chunk size

        /*
        |--------------------------------------------------------------------------
        | Memory Management
        |--------------------------------------------------------------------------
        */
        'memory_limit' => env('SPECTRUM_MEMORY_LIMIT', '512M'),
        'memory_warning_threshold' => 0.8, // 80%
        'memory_critical_threshold' => 0.9, // 90%

        /*
        |--------------------------------------------------------------------------
        | Incremental Generation
        |--------------------------------------------------------------------------
        */
        'incremental' => [
            'enabled' => env('SPECTRUM_INCREMENTAL_ENABLED', true),
            'track_dependencies' => true,
            'cache_dependencies' => true,
        ],

        /*
        |--------------------------------------------------------------------------
        | Profiling
        |--------------------------------------------------------------------------
        */
        'profiling' => [
            'enabled' => env('SPECTRUM_PROFILING_ENABLED', false),
            'save_reports' => true,
            'report_path' => function_exists('storage_path')
                ? storage_path('spectrum/profiling')
                : getcwd().'/storage/spectrum/profiling',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Export Settings
    |--------------------------------------------------------------------------
    |
    | Configure export functionality for Postman and Insomnia collections.
    |
    */
    'export' => [
        /*
        |--------------------------------------------------------------------------
        | Export Settings
        |--------------------------------------------------------------------------
        */
        'postman' => [
            'include_examples' => true,
            'include_tests' => true,
            'include_pre_request_scripts' => true,
            'group_by_tags' => true,
        ],

        'insomnia' => [
            'include_examples' => true,
            'include_environments' => true,
            'default_timeout' => 30000, // 30 seconds
        ],

        /*
        |--------------------------------------------------------------------------
        | Environment Variables
        |--------------------------------------------------------------------------
        |
        | Custom environment variables to include in exported collections
        |
        */
        'environment_variables' => [
            // 'custom_header' => 'X-Custom-Header',
            // 'api_version' => 'v1',
        ],

        /*
        |--------------------------------------------------------------------------
        | Authentication Presets
        |--------------------------------------------------------------------------
        */
        'auth_presets' => [
            'bearer' => [
                'type' => 'bearer',
                'token_placeholder' => '{{bearer_token}}',
            ],
            'api_key' => [
                'type' => 'apikey',
                'key_placeholder' => '{{api_key}}',
                'header' => 'X-API-Key',
            ],
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Mock Server Settings
    |--------------------------------------------------------------------------
    */
    'mock_server' => [
        'default_host' => '127.0.0.1',
        'default_port' => 8081,

        /*
        |--------------------------------------------------------------------------
        | Response Configuration
        |--------------------------------------------------------------------------
        */
        'response' => [
            // デフォルトの遅延（ミリ秒）
            'delay' => env('SPECTRUM_MOCK_DELAY', 0),

            // レスポンスシナリオ
            'scenarios' => [
                'success' => 'Successful response',
                'error' => 'Server error (500)',
                'not_found' => 'Resource not found (404)',
                'forbidden' => 'Access forbidden (403)',
                'validation_error' => 'Validation failed (422)',
            ],

            // ランダムエラーの確率（0-100）
            'random_error_rate' => env('SPECTRUM_MOCK_ERROR_RATE', 0),
        ],

        /*
        |--------------------------------------------------------------------------
        | Authentication Simulation
        |--------------------------------------------------------------------------
        */
        'auth' => [
            // モック認証トークン
            'valid_tokens' => [
                'test-token-123',
                'Bearer test-jwt-token',
            ],

            // 認証不要のパス
            'public_paths' => [
                'POST /api/auth/login',
                'POST /api/auth/register',
                'GET /api/health',
            ],
        ],

        /*
        |--------------------------------------------------------------------------
        | Data Generation
        |--------------------------------------------------------------------------
        */
        'faker' => [
            // Fakerのロケール
            'locale' => config('app.faker_locale', 'en_US'),

            // シード値（再現可能なデータ生成）
            'seed' => env('SPECTRUM_MOCK_SEED', null),
        ],
    ],
];
